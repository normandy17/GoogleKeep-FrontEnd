[{"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\index.js":"1","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\App.js":"2","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\store.js":"3","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\theme.js":"4","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\user\\reducer.js":"5","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\uiRedux\\reducer.js":"6","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\taskRedux\\reducer.js":"7","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\Search\\reducer.js":"8","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Routes\\index.js":"9","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\user\\actionTypes.js":"10","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\uiRedux\\actionTypes.js":"11","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\taskRedux\\actionTypes.js":"12","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\Search\\actionTypes.js":"13","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Routes\\Routes.js":"14","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Routes\\PrivateRoute.js":"15","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Pages\\Feed\\Feed.js":"16","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Pages\\SearchResult\\SearchResult.jsx":"17","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Pages\\Register\\Register.jsx":"18","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Pages\\Login\\Login.jsx":"19","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\user\\actions.js":"20","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\taskRedux\\actions.js":"21","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\Loading\\Loading.js":"22","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\Search\\actions.js":"23","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\feed\\searchedTasksContainer.js":"24","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\navbar\\navbar.js":"25","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\feed\\tasksContainer.js":"26","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\drawer\\drawer.js":"27","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\feed\\task.js":"28","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\uiRedux\\actions.js":"29","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\drawer\\drawerItem.js":"30","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\feed\\addTask.js":"31","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\navbar\\search.js":"32","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\navbar\\profile.js":"33","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\content.js":"34","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\heading.js":"35","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\actions.js":"36","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\labels.js":"37","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\label.js":"38","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\color.js":"39","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\list.js":"40","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\text.js":"41"},{"size":399,"mtime":1617461333170,"results":"42","hashOfConfig":"43"},{"size":376,"mtime":1617184554017,"results":"44","hashOfConfig":"43"},{"size":642,"mtime":1617341162671,"results":"45","hashOfConfig":"43"},{"size":3493,"mtime":1617184644579,"results":"46","hashOfConfig":"43"},{"size":1956,"mtime":1617446956597,"results":"47","hashOfConfig":"43"},{"size":1253,"mtime":1617389993069,"results":"48","hashOfConfig":"43"},{"size":1535,"mtime":1617446893514,"results":"49","hashOfConfig":"43"},{"size":950,"mtime":1617617932597,"results":"50","hashOfConfig":"43"},{"size":33,"mtime":1612552952948,"results":"51","hashOfConfig":"43"},{"size":519,"mtime":1617341356785,"results":"52","hashOfConfig":"43"},{"size":252,"mtime":1617367495840,"results":"53","hashOfConfig":"43"},{"size":343,"mtime":1617389965815,"results":"54","hashOfConfig":"43"},{"size":133,"mtime":1617617777554,"results":"55","hashOfConfig":"43"},{"size":804,"mtime":1617384594116,"results":"56","hashOfConfig":"43"},{"size":606,"mtime":1617462192274,"results":"57","hashOfConfig":"43"},{"size":1426,"mtime":1617617270194,"results":"58","hashOfConfig":"43"},{"size":1403,"mtime":1617618074872,"results":"59","hashOfConfig":"43"},{"size":5704,"mtime":1617445575211,"results":"60","hashOfConfig":"43"},{"size":5063,"mtime":1617445572788,"results":"61","hashOfConfig":"43"},{"size":3339,"mtime":1617461999175,"results":"62","hashOfConfig":"43"},{"size":3013,"mtime":1617617216608,"results":"63","hashOfConfig":"43"},{"size":252,"mtime":1617616628490,"results":"64","hashOfConfig":"43"},{"size":822,"mtime":1617618141730,"results":"65","hashOfConfig":"43"},{"size":4189,"mtime":1617618771266,"results":"66","hashOfConfig":"43"},{"size":6449,"mtime":1617466073439,"results":"67","hashOfConfig":"43"},{"size":4221,"mtime":1617457404551,"results":"68","hashOfConfig":"43"},{"size":3640,"mtime":1617617484211,"results":"69","hashOfConfig":"43"},{"size":3796,"mtime":1617617304767,"results":"70","hashOfConfig":"43"},{"size":656,"mtime":1617367563811,"results":"71","hashOfConfig":"43"},{"size":898,"mtime":1617180503474,"results":"72","hashOfConfig":"43"},{"size":3967,"mtime":1617455705607,"results":"73","hashOfConfig":"43"},{"size":3023,"mtime":1617439183228,"results":"74","hashOfConfig":"43"},{"size":3429,"mtime":1617462312748,"results":"75","hashOfConfig":"43"},{"size":465,"mtime":1617389668077,"results":"76","hashOfConfig":"43"},{"size":1435,"mtime":1617213531140,"results":"77","hashOfConfig":"43"},{"size":6779,"mtime":1617439195289,"results":"78","hashOfConfig":"43"},{"size":929,"mtime":1617617619825,"results":"79","hashOfConfig":"43"},{"size":6042,"mtime":1617341724012,"results":"80","hashOfConfig":"43"},{"size":3432,"mtime":1617213449245,"results":"81","hashOfConfig":"43"},{"size":5533,"mtime":1617373447017,"results":"82","hashOfConfig":"43"},{"size":1956,"mtime":1617389683834,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1cv39oi",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"86"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"86"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"86"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"86"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"86"},"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\index.js",[],["184","185"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\App.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\store.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\theme.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\user\\reducer.js",["186"],"import {\r\n  LOGIN_SUCCESS,LOGIN_FAILURE,LOGIN_REQUEST,\r\n  REGISTER_REQUEST,REGISTER_SUCCESS,REGISTER_FAILURE,\r\n  LOGOUT,ADD_LABEL} from \"./actionTypes\";\r\n\r\nconst initState = {\r\n  isAuth: false,\r\n  name: null,\r\n  loading:false,\r\n  email: null,\r\n  error: false,\r\n  errormsg: \"\",  \r\n  id:null\r\n};\r\n\r\nexport const authReducer = (state = initState, { type, payload }) => {\r\n  //console.log(\"type\", type, payload);\r\n  switch (type) {\r\n    case LOGIN_REQUEST: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n        isAuth: false,\r\n      };\r\n    }\r\n    case LOGIN_SUCCESS: {      \r\n      return {\r\n        ...state,\r\n        isAuth: true,\r\n        loading:false,\r\n        name: payload.name,\r\n        email: payload.email,\r\n        id:payload._id,\r\n        error: null\r\n      };\r\n    }\r\n\r\n    case LOGIN_FAILURE: {\r\n       //console.log(payload);\r\n      return {\r\n        ...state,\r\n        isAuth: false,\r\n        loading:false,\r\n        userdata: null,\r\n        error: true,\r\n        errormsg: payload,\r\n      };\r\n    }\r\n    case REGISTER_REQUEST: {\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        error: null,\r\n        isAuth: false,\r\n      };\r\n    }\r\n    case REGISTER_SUCCESS: {\r\n      console.log(payload)\r\n      return {\r\n        ...state,\r\n        isAuth: true,\r\n        loading:false,\r\n        name: payload.name,\r\n        email: payload.email,\r\n        id:payload._id,\r\n        error: null\r\n      };\r\n    }\r\n\r\n    case REGISTER_FAILURE: {\r\n      return {\r\n        ...state,\r\n        status: payload,\r\n        error: true,\r\n        errormsg: payload,\r\n        userdata:null,\r\n        isAuth: false,\r\n      };\r\n    }\r\n\r\n    case LOGOUT: {\r\n      localStorage.removeItem('accesstoken')\r\n      \r\n      return {\r\n        ...state,\r\n        isAuth: false,\r\n        userdata: null,\r\n        name:null,\r\n        email:null,\r\n        id:null\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\uiRedux\\reducer.js",["187"],"import {SET_LABEL, TOGGLE_DRAWER,TOGGLE_THEME,TOGGLE_UI,SET_FILTER, SET_EDIT} from \"./actionTypes\";\r\n\r\nconst initState = {\r\n  theme:JSON.parse(localStorage.getItem('theme')) || false,\r\n  drawer:false,\r\n  UI:JSON.parse(localStorage.getItem('UI')) || false,\r\n  label:\"\",\r\n  filter:\"active\",\r\n  edit:\"\"\r\n};\r\n\r\nexport const themeReducer = (state = initState, { type, payload }) => {\r\n\r\n  switch (type) {\r\n\r\n    case TOGGLE_UI: {\r\n      var stat=state.UI\r\n      localStorage.setItem('UI', !stat)\r\n      return {\r\n        ...state,\r\n        UI:!stat       \r\n      };\r\n    }\r\n    case TOGGLE_DRAWER: {\r\n      return {\r\n        ...state,\r\n        drawer:!state.drawer        \r\n      };\r\n    }\r\n    case TOGGLE_THEME: {\r\n      var stat=state.theme\r\n      localStorage.setItem('theme', !stat)\r\n      return {\r\n        ...state,\r\n        theme:!stat        \r\n      };\r\n    }\r\n    case SET_LABEL: {      \r\n      return {\r\n        ...state,\r\n        label:payload        \r\n      };\r\n    }\r\n    case SET_FILTER: {      \r\n      return {\r\n        ...state,\r\n        filter:payload        \r\n      };\r\n    }\r\n    case SET_EDIT: {      \r\n      return {\r\n        ...state,\r\n        edit:payload        \r\n      };\r\n    }  \r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\taskRedux\\reducer.js",["188","189","190"],"import {\r\n    GET_TASKS_REQUEST, GET_TASKS_SUCCESS, GET_TASKS_FAILURE,\r\n    // GET_TASK_REQUEST, GET_TASK_SUCCESS, GET_TASK_FAILURE,\r\n    ADD_LABEL,ADD_TASK_REQUEST, ADD_TASK_SUCCESS, ADD_TASK_FAILURE\r\n} from \"./actionTypes\";\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    error: null,\r\n    tasks: [],\r\n    labelItems: []\r\n}\r\n\r\nexport const tasksReducer = (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case GET_TASKS_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: null\r\n            }\r\n\r\n        case GET_TASKS_SUCCESS:\r\n            //console.log(payload)\r\n            var labels = []\r\n            for (var i = 0; i < payload.length; i++) {\r\n                for (var j = 0; j < payload[i].labels.length; j++) {\r\n                    labels.push(payload[i].labels[j])\r\n                }\r\n            }\r\n            //console.log(\"labels\",labels)\r\n            labels = [...new Set(labels)]\r\n\r\n            return {\r\n                ...state,\r\n                tasks: payload,\r\n                labelItems: labels,\r\n                isLoading: false\r\n            }\r\n\r\n        case GET_TASKS_FAILURE:\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                isLoading: false\r\n            }\r\n\r\n        case ADD_LABEL: {\r\n            return {\r\n                ...state,\r\n                labelItems: [...state.labelItems, payload]\r\n            };\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\Search\\reducer.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Routes\\index.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\user\\actionTypes.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\uiRedux\\actionTypes.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\taskRedux\\actionTypes.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\Search\\actionTypes.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Routes\\Routes.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Routes\\PrivateRoute.js",["191"],"import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Redirect, Route } from \"react-router-dom\";\r\nimport { getActiveUser } from \"../Redux/user/actions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst PrivateRoute = ({ MyComponent, ...rest }) => {\r\n  const dispatch = useDispatch();\r\n  React.useEffect(() => {\r\n    dispatch(getActiveUser());\r\n  }, []);\r\n  const isAuth  = useSelector(state => state.auth.isAuth);\r\n  return isAuth? (\r\n    <Route {...rest} render={(props) => <MyComponent {...props} />} />\r\n  ) : (<Redirect to=\"/home\" />);\r\n};\r\n\r\nexport default PrivateRoute;","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Pages\\Feed\\Feed.js",["192"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Pages\\SearchResult\\SearchResult.jsx",["193"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Pages\\Register\\Register.jsx",["194","195","196"],"import React, { useState,useEffect } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { Paper, TextField, Button, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {Loading} from \"../../Components/Loading/Loading\";\r\nimport { Regreq } from \"../../Redux/user/actions\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageWrapper: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    pageContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        flexGrow: \"1\"\r\n    },\r\n    boxWrapper: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        padding: theme.spacing(3)\r\n    },\r\n    textWelcome: {\r\n        ...theme.custom.fontFamily.metropolis\r\n    },\r\n    textLogin: {\r\n        textDecoration: \"none\",\r\n        color: theme.palette.secondary.dark\r\n    },\r\n    textLoginText: {\r\n        ...theme.custom.fontFamily.metropolis,\r\n        paddingTop: theme.spacing(3)\r\n    },\r\n    textNotice: {\r\n        ...theme.custom.fontFamily.roboto,\r\n        lineHeight: \"unset\",\r\n        textAlign: \"center\",\r\n        paddingTop: theme.spacing(2)\r\n    },\r\n    textAttribution: {\r\n        padding: theme.spacing(0, 2, 2, 0),\r\n        textAlign: \"right\"\r\n    },\r\n    textCreator: {\r\n        textDecoration: \"none\",\r\n        color: theme.palette.secondary.dark\r\n    },\r\n    registerButtonRoot: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    registerButtonText: {\r\n        ...theme.custom.fontFamily.metropolis,\r\n        color: theme.palette.secondary.contrastText,\r\n        textTransform: \"capitalize\"\r\n    },\r\n    logo: {\r\n        height: theme.spacing(7),\r\n        padding: theme.spacing(0, 0, 1, 0)\r\n    },\r\n    inputRoot: {\r\n        '&$inputFocused $inputNotchedOutline': {\r\n            borderColor: theme.palette.secondary.main\r\n        },\r\n    },\r\n    inputNotchedOutline: {},\r\n    inputFocused: {},\r\n    inputLabelRoot: {\r\n        '&$inputFocused': {\r\n            color: theme.palette.secondary.main\r\n        },\r\n    }\r\n}));\r\n\r\nexport function Register ({ navigate }) {\r\n    const classes = useStyles();\r\n    const history=useHistory()\r\n    const [name, setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const isAuth  = useSelector(state => state.auth.isAuth);\r\n    const error = useSelector(state => state.auth.error)\r\n    const result = useSelector(state => state.auth.errormsg)\r\n    const loading = useSelector(state => state.auth.loading)   \r\n    const dispatch=useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n          history.push(\"/home\");\r\n        }\r\n      }, [isAuth]);\r\n\r\n    const inputProps = {\r\n        classes: {\r\n            root: classes.inputRoot,\r\n            notchedOutline: classes.inputNotchedOutline,\r\n            focused: classes.inputFocused\r\n        }\r\n    }\r\n    const inputLabelProps = {\r\n        classes: {\r\n            root: classes.inputLabelRoot,\r\n            focused: classes.inputFocused\r\n        }\r\n    }\r\n\r\n    const onRegisterClick = ()=>{        \r\n        dispatch(Regreq(name,email,password))\r\n    }\r\n    \r\n    if (loading) return (<Loading />)\r\n    \r\n    return (\r\n        <div className={classes.pageWrapper}>\r\n            <Container maxWidth=\"md\" className={classes.pageContainer}>\r\n                <Paper elevation={3}>\r\n                    <div className={classes.boxWrapper} >\r\n                        <img className={classes.logo} src={`../logo.png`} alt={\"logo\"} />\r\n                        <Typography className={classes.textWelcome} color=\"textSecondary\" variant=\"subtitle1\">Hello!</Typography>\r\n                        <TextField required InputLabelProps={inputLabelProps} InputProps={inputProps} name=\"name\" label=\"Name\" type=\"text\" variant=\"outlined\" value={name} onChange={event => setName(event.target.value)} error={result === `\"name\" is not allowed to be empty`} helperText={result === `\"name\" is not allowed to be empty` && result} fullWidth margin=\"normal\" />\r\n                        <TextField required InputLabelProps={inputLabelProps} InputProps={inputProps} name=\"email\" label=\"Email\" type=\"email\" variant=\"outlined\" value={email} error={result === \"User has already registered\"} helperText={result === \"User has already registered\" && result } onChange={event => setEmail(event.target.value)} fullWidth margin=\"normal\" />\r\n                        <TextField required InputLabelProps={inputLabelProps} InputProps={inputProps} name=\"password\" label=\"Password\" type=\"password\" variant=\"outlined\" value={password} error={result === `\"password\" length must be at least 4 characters long`} helperText={result === `\"password\" length must be at least 4 characters long` && result} onChange={event => setPassword(event.target.value)} fullWidth margin=\"normal\" />\r\n                        <Button classes={{ root: classes.registerButtonRoot, label: classes.registerButtonText }} onClick={onRegisterClick} disabled={email === \"\" || password === \"\"} variant=\"contained\" color=\"secondary\" disableElevation fullWidth size=\"large\">Register</Button>\r\n                    </div>\r\n                </Paper>\r\n                <Typography className={classes.textLoginText} color=\"textSecondary\" variant=\"body2\">Already have an account? <Link className={classes.textLogin} to=\"/login\">Log In</Link></Typography>\r\n            </Container>\r\n        </div>\r\n    )\r\n}","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Pages\\Login\\Login.jsx",["197","198","199"],"import React, { useState, useEffect } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { Paper, TextField, Button, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {Loading} from \"../../Components/Loading/Loading\";\r\nimport { Loginreq } from \"../../Redux/user/actions\";\r\nimport {useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    pageWrapper: {\r\n        height: \"100vh\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\"\r\n    },\r\n    pageContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        flexGrow: \"1\"\r\n    },\r\n    boxWrapper: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        padding: theme.spacing(3)\r\n    },\r\n    textWelcome: {\r\n        ...theme.custom.fontFamily.metropolis\r\n    },\r\n    textRegister: {\r\n        textDecoration: \"none\",\r\n        color: theme.palette.secondary.dark\r\n    },\r\n    textRegisterText: {\r\n        ...theme.custom.fontFamily.metropolis,\r\n        paddingTop: theme.spacing(3)\r\n    },\r\n    textNotice: {\r\n        ...theme.custom.fontFamily.roboto,\r\n        lineHeight: \"unset\",\r\n        textAlign: \"center\",\r\n        paddingTop: theme.spacing(2)\r\n    },\r\n    textAttribution: {\r\n        padding: theme.spacing(0, 2, 2, 0),\r\n        textAlign: \"right\"\r\n    },\r\n    textCreator: {\r\n        textDecoration: \"none\",\r\n        color: theme.palette.secondary.dark\r\n    },\r\n    loginButtonRoot: {\r\n        marginTop: theme.spacing(3)\r\n    },\r\n    loginButtonText: {\r\n        ...theme.custom.fontFamily.metropolis,\r\n        color: theme.palette.secondary.contrastText,\r\n        textTransform: \"capitalize\"\r\n    },\r\n    logo: {\r\n        height: theme.spacing(7),\r\n        padding: theme.spacing(0, 0, 1, 0)\r\n    },\r\n    inputRoot: {\r\n        '&$inputFocused $inputNotchedOutline': {\r\n            borderColor: theme.palette.secondary.main\r\n        },\r\n    },\r\n    inputNotchedOutline: {},\r\n    inputFocused: {},\r\n    inputLabelRoot: {\r\n        '&$inputFocused': {\r\n            color: theme.palette.secondary.main\r\n        },\r\n    }\r\n}));\r\n\r\nexport const Login = () => {\r\n    const classes = useStyles();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const isAuth  = useSelector(state => state.auth.isAuth);    \r\n    const result = useSelector(state => state.auth.errormsg)\r\n    const loading = useSelector(state => state.auth.loading)   \r\n    const history = useHistory();\r\n    const dispatch=useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (isAuth) {\r\n          history.push(\"/home\");\r\n        }\r\n      }, [isAuth]);\r\n\r\n   const inputProps = {\r\n        classes: {\r\n            root: classes.inputRoot,\r\n            notchedOutline: classes.inputNotchedOutline,\r\n            focused: classes.inputFocused\r\n        }\r\n    }\r\n    const inputLabelProps = {\r\n        classes: {\r\n            root: classes.inputLabelRoot,\r\n            focused: classes.inputFocused\r\n        }\r\n    }\r\n\r\n    const onLoginClick = ()=>{\r\n        dispatch(Loginreq(email,password))\r\n    }\r\n\r\n    if (loading) return (<Loading />)\r\n\r\n    return (\r\n        <div className={classes.pageWrapper}>\r\n            <Container maxWidth=\"md\" className={classes.pageContainer}>\r\n                <Paper elevation={3}>\r\n                    <div className={classes.boxWrapper} >\r\n                        <img className={classes.logo} src={`../logo.png`} alt={\"logo\"} />\r\n                        <Typography className={classes.textWelcome} color=\"textSecondary\" variant=\"subtitle1\">Welcome back!</Typography>\r\n                        <TextField error={result === \"User not registered\"} InputLabelProps={inputLabelProps} InputProps={inputProps} name=\"email\" onChange={event => setEmail(event.target.value)} label=\"Email\" type=\"email\" variant=\"outlined\" fullWidth margin=\"normal\" />\r\n                        <TextField error={result === \"Invalid password\"} InputLabelProps={inputLabelProps} InputProps={inputProps} name=\"password\" onChange={event => setPassword(event.target.value)} label=\"Password\" type=\"password\" variant=\"outlined\" fullWidth margin=\"normal\" helperText={result === \"User not registered\" || result === \"Invalid password\" && result} />\r\n                        <Button classes={{ root: classes.loginButtonRoot, label: classes.loginButtonText }} onClick={onLoginClick} disabled={loading || email === \"\" || password === \"\"} variant=\"contained\" color=\"secondary\" disableElevation fullWidth size=\"large\">Log In</Button>\r\n                    </div>\r\n                </Paper>\r\n                <Typography className={classes.textRegisterText} color=\"textSecondary\" variant=\"body2\">Don't have an account? <Link className={classes.textRegister} to=\"/register\">Register</Link></Typography>\r\n            </Container>\r\n           \r\n        </div>\r\n    )\r\n}","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\user\\actions.js",["200","201"],"import {\r\n  LOGIN_FAILURE,\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  REGISTER_REQUEST,\r\n  REGISTER_FAILURE,\r\n  LOGOUT,\r\n  REGISTER_SUCCESS,\r\n} from \"./actionTypes\";\r\nimport axios from \"axios\";\r\nconst loginRequest = (uname, pass) => {\r\n  return {\r\n    type: LOGIN_REQUEST,\r\n    payload: {\r\n      username: uname,\r\n      password: pass,\r\n    },\r\n  };\r\n};\r\nconst loginSuccess = (payload) => {\r\n  return {\r\n    type: LOGIN_SUCCESS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\nconst loginFailure = (error) => {\r\n  return {\r\n    type: LOGIN_FAILURE,\r\n    payload: error,\r\n  };\r\n};\r\nconst registerRequest = () => {\r\n  return {\r\n    type: REGISTER_REQUEST,\r\n  };\r\n};\r\n\r\nconst registerFailure = (error) => {\r\n  return {\r\n    type: REGISTER_FAILURE,\r\n    payload: error,\r\n  };\r\n};\r\n\r\n\r\n\r\nexport const logout = () => {\r\n  return {\r\n    type: LOGOUT,\r\n  };\r\n};\r\n\r\nconst registerSuccess = (payload) => {\r\n  return {\r\n    type: REGISTER_SUCCESS,\r\n    payload: payload,\r\n  };\r\n};\r\n\r\n\r\nvar i=0\r\n\r\nexport const getActiveUser = () => (dispatch) => {  \r\n  // dispatch(loginRequest())\r\n  const accessToken = localStorage.getItem('accesstoken');\r\n  axios({\r\n    method: \"GET\",\r\n    url: \"https://google-keep-backend.herokuapp.com/api/users\",\r\n    headers: {\r\n      authorization: `Bearer ${accessToken}`,\r\n    },\r\n  })\r\n    .then((res) => {\r\n      //console.log(\"logged in\", res.data[0]);\r\n      dispatch(loginSuccess(res.data[0]));\r\n      return true;\r\n    })\r\n    .catch((res) => {\r\n     // console.log(\"error\", res);\r\n      dispatch(loginFailure(res));\r\n    });\r\n}\r\n\r\nexport const Loginreq = (email, pass) => (dispatch) => {\r\n  dispatch(loginRequest(email, pass));\r\n  const config = {\r\n    method: \"POST\",\r\n    url: \"https://google-keep-backend.herokuapp.com/api/login\",\r\n    data: {\r\n      email: email,\r\n      password: pass,\r\n    },\r\n  };\r\n\r\n  return axios(config)\r\n    .then((res) => {\r\n     // console.log(res.data.accesstoken);\r\n      localStorage.setItem('accesstoken', res.data.accesstoken)\r\n      return axios({\r\n        method: \"GET\",\r\n        url: \"https://google-keep-backend.herokuapp.com/api/users\",\r\n        headers: {\r\n          authorization: `Bearer ${res.data.accesstoken}`,\r\n        },\r\n      })\r\n        .then((res) => {\r\n         // console.log(\"logged in\", res.data[0]);\r\n          dispatch(loginSuccess(res.data[0]));\r\n          return true;\r\n        })\r\n        .catch((res) => {\r\n          //console.log(\"error\", res.response.data);\r\n          dispatch(loginFailure(res.response.data));\r\n        });\r\n    })\r\n    .catch((res) => {\r\n     // console.log(\"error\", res.response.data);\r\n      dispatch(loginFailure(res.response.data));\r\n    });\r\n};\r\n\r\nexport const Regreq = (name,email,pass) => (dispatch) => {\r\n  //console.log(name,email,pass)\r\n  dispatch(registerRequest());\r\n  const config = {\r\n    method: \"post\",\r\n    url: \"https://google-keep-backend.herokuapp.com/api/users\",\r\n    data: {\r\n      name:name,\r\n      email:email,\r\n      password:pass\r\n    },\r\n  };\r\n\r\n  return axios(config)\r\n    .then((res) => {\r\n      console.log(res.data);\r\n      //dispatch(setRegister(true));\r\n      //dispatch(registerSuccess(res.data));\r\n      dispatch(Loginreq(email,pass))\r\n      return true;\r\n    })\r\n    .catch((res) => {\r\n      //console.log(\"error\", res.response.data);\r\n      dispatch(registerFailure(res.response.data));\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\taskRedux\\actions.js",["202"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\Loading\\Loading.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\Search\\actions.js",["203"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\feed\\searchedTasksContainer.js",["204","205"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\navbar\\navbar.js",["206"],"import React, { useRef, useState } from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport {AppBar,Toolbar,IconButton,Typography,useScrollTrigger,useMediaQuery} from \"@material-ui/core\";\r\nimport {AccountCircleOutlined as AccountsIcon,DashboardOutlined as TileViewIcon,Brightness4Outlined as ToggleDarkModeIcon,\r\n  Brightness5Outlined as ToggleLightModeIcon,SearchOutlined as SearchIcon,FastfoodOutlined as MenuIcon,FastfoodRounded as MenuIcon2,\r\n  ViewAgendaOutlined as ListIcon} from \"@material-ui/icons\";\r\nimport ProfilePopover from \"./profile\";\r\nimport SearchBar from \"./search\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { toggle_drawer, toggle_theme, toggle_UI } from \"../../Redux/uiRedux/actions\";\r\nimport {useHistory } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  grow: {\r\n    flexGrow: 1\r\n  },\r\n  containerBorder: {\r\n    borderBottomStyle: \"solid\",\r\n    borderBottomWidth: \"1px\",\r\n    borderBottomColor: theme.palette.divider\r\n  },\r\n  menuButton: {\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      marginRight: theme.spacing(1)\r\n    }\r\n  },\r\n  logoContainer: {\r\n    display: \"flex\",\r\n    justifyContent: \"stretch\",\r\n    cursor:\"pointer\",\r\n    background:\"\"\r\n  },\r\n  logo: {\r\n    display: \"none\",\r\n    height: theme.spacing(5.5),\r\n    padding: theme.spacing(0, 1, 0, 0),\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\"\r\n    }\r\n  },\r\n  title: {\r\n    ...theme.custom.fontFamily.metropolis,\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"xs\")]: {\r\n      display: \"flex\",\r\n      alignItems: \"center\"\r\n    }\r\n  },\r\n  searchbarContainer: {\r\n    flexGrow: 1,\r\n    marginLeft: theme.spacing(1),\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      flexGrow: 0,\r\n      width: theme.spacing(90),\r\n      marginLeft: theme.spacing(9)\r\n    }\r\n  }\r\n}));\r\n\r\nexport default function () {\r\n  const menuId = \"primary-search-account-menu\";\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [isProfilePopoverOpen, setProfilePopoverOpen] = useState(false);\r\n  const [isSearchShowingInMobile, setSearchShowing] = useState(false);\r\n  const profileMenuRef = useRef();\r\n  const trigger = useScrollTrigger({\r\n    disableHysteresis: true,\r\n    threshold: 0\r\n  });\r\n  const dispatch=useDispatch()\r\n  \r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n  const isDarkMode=useSelector(state => state.theme.theme)\r\n  const isListView =useSelector(state => state.theme.UI)\r\n  const isNavBarOpen=useSelector(state => state.theme.drawer)\r\n  \r\n  const toggleNavBar = ()=>{\r\n    dispatch(toggle_drawer())\r\n  };\r\n  const onDarkModeToggle = ()=>{\r\n    dispatch(toggle_theme())\r\n  }\r\n  const onViewToggle = ()=>{\r\n    dispatch(toggle_UI())\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar\r\n        elevation={trigger ? 4 : 0}\r\n        className={trigger ? null : classes.containerBorder}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            aria-label=\"open drawer\"\r\n            onClick={toggleNavBar}\r\n          >\r\n            {!isNavBarOpen && <MenuIcon htmlColor={theme.custom.palette.iconColor} />}\r\n            {isNavBarOpen && <MenuIcon2 htmlColor={theme.custom.palette.iconColor} />}\r\n          </IconButton>\r\n          {isMobile ? (\r\n            isSearchShowingInMobile ? (\r\n              <SearchContainer onSearchClose={() => setSearchShowing(false)} />\r\n            ) : (\r\n                <LogoContainer />\r\n              )\r\n          ) : (\r\n              <>\r\n                <LogoContainer />\r\n                <SearchContainer onSearchClose={() => setSearchShowing(false)} />\r\n              </>\r\n            )}\r\n          <div className={classes.grow} />\r\n          {isMobile && !isSearchShowingInMobile ? (\r\n            <div>\r\n              <IconButton\r\n                aria-label=\"search\"\r\n                aria-controls={menuId}\r\n                onClick={() => setSearchShowing(true)}\r\n              >\r\n                <SearchIcon htmlColor={theme.custom.palette.iconColor} />\r\n              </IconButton>\r\n            </div>\r\n          ) : null}          \r\n          <div>\r\n            <IconButton\r\n              aria-label=\"toggle dark theme\"\r\n              aria-controls={menuId}\r\n              onClick={onDarkModeToggle}\r\n            >\r\n              {isDarkMode ? <ToggleLightModeIcon htmlColor={theme.custom.palette.iconColor} /> : <ToggleDarkModeIcon htmlColor={theme.custom.palette.iconColor} />}\r\n            </IconButton>\r\n          </div>\r\n          {isMobile ? null : (\r\n            <div>\r\n              <IconButton\r\n                aria-label={\r\n                  isListView ? \"toggle tile view\" : \"toggle list view\"\r\n                }\r\n                aria-controls={menuId}\r\n                onClick={onViewToggle}\r\n              >\r\n                {isListView ? <TileViewIcon htmlColor={theme.custom.palette.iconColor} /> : <ListIcon htmlColor={theme.custom.palette.iconColor} />}\r\n              </IconButton>\r\n            </div>\r\n          )}\r\n          <div>\r\n            <IconButton\r\n              edge=\"end\"\r\n              ref={profileMenuRef}\r\n              aria-label=\"account of current user\"\r\n              aria-controls={menuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={() => setProfilePopoverOpen(true)}\r\n            >\r\n              <AccountsIcon htmlColor={theme.custom.palette.iconColor} />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n        <ProfilePopover\r\n          anchorEl={profileMenuRef.current}\r\n          isOpen={isProfilePopoverOpen}\r\n          onClose={() => setProfilePopoverOpen(false)}\r\n        />\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction LogoContainer() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const onClickHome = ()=>{\r\n    history.push(\"/home\");\r\n  }\r\n  return (\r\n    <div className={classes.logoContainer} onClick={onClickHome}>\r\n      <img className={classes.logo} src={`../../logo.png`} alt={\"logo\"} />\r\n      <Typography\r\n        color=\"textSecondary\"\r\n        className={classes.title}\r\n        variant=\"h6\"\r\n        noWrap\r\n      >\r\n        Keep\r\n      </Typography>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction SearchContainer({ onSearchClose }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.searchbarContainer}>\r\n      <SearchBar ml={8} onSearchClose={onSearchClose} />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\feed\\tasksContainer.js",["207","208","209","210"],"import React from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport TodoCreate from \"./addTask\";\r\nimport TodoItem from \"./task\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\nimport { useSelector,useDispatch } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  content: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen\r\n    }),\r\n    marginLeft: theme.mixins.drawer.minWidth - theme.spacing(2.5),\r\n    marginRight: -1 * theme.spacing(3)\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen\r\n    }),\r\n    marginLeft: 0\r\n  },\r\n  todoCreateContainer: {\r\n    display: \"flex\",\r\n    padding: theme.spacing(4, 0),\r\n    margin: theme.spacing(0, 1)\r\n  },\r\n  todoCreateWrapper: {\r\n    flex: 1,\r\n    maxWidth: theme.spacing(75),\r\n    margin: \"0 auto\"\r\n  },\r\n  todosWrapper: {\r\n    margin: \"0 auto\",\r\n    columnWidth: theme.spacing(29),\r\n    columnGap: \"0.5rem\"\r\n  },\r\n  todoWrapper: {\r\n    width: theme.spacing(29),\r\n    margin: \"0 auto\",\r\n    breakInside: \"avoid\",\r\n    pageBreakInside: \"avoid\",\r\n    padding: \"0.5rem 0\",\r\n    transition: theme.transitions.create(\"all\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.standard\r\n    })\r\n  }\r\n}));\r\n\r\nexport default function () {\r\n\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const isMobile = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n  const isTablet = useMediaQuery(theme.breakpoints.up(\"sm\"));\r\n  const isLaptop = useMediaQuery(theme.breakpoints.up(\"md\"));\r\n  const isLaptopL = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n  const is4K = useMediaQuery(theme.breakpoints.up(\"xl\"));\r\n  const numberOfColumns = is4K\r\n    ? 8\r\n    : isLaptopL\r\n      ? 4\r\n      : isLaptop\r\n        ? 3\r\n        : isTablet\r\n          ? 2\r\n          : 1;\r\n  var width = is4K\r\n    ? \"100%\"\r\n    : isLaptopL\r\n      ? \"1000px\"\r\n      : isLaptop\r\n        ? \"730px\"\r\n        : isTablet\r\n          ? \"480px\"\r\n          : \"100%\";\r\n  const isListView = useSelector(state => state.theme.UI);\r\n  const isNavBarOpen = useSelector(state => state.theme.drawer)\r\n  const noteInEditMode = useSelector(state => state.theme.edit)\r\n  const selectedLabel = useSelector(state => state.theme.label);\r\n  const selectedFilter = useSelector(state => state.theme.filter);\r\n  const loading = useSelector(state => state.tasks.isLoading);\r\n  const dispatch = useDispatch()\r\n    const id = useSelector(state => state.auth.id);\r\n  const notes = useSelector(state => state.tasks.tasks);\r\n  const statusfilteredItems = notes.filter(item => item.status === selectedFilter);\r\n  const filteredItems = statusfilteredItems.filter(item => {\r\n    if (selectedLabel !== \"\") {\r\n      return item.labels.some((labelItem) => labelItem === selectedLabel);\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n\r\n  width = isListView\r\n    ? isLaptop || isLaptopL\r\n      ? theme.spacing(75)\r\n      : \"100%\"\r\n    : width;  \r\n\r\n  return (\r\n    <main>\r\n      <div\r\n        className={\r\n          isMobile || !isNavBarOpen ? classes.contentShift : classes.content\r\n        }\r\n      >\r\n        <div className={classes.todoCreateContainer}>\r\n          <div className={classes.todoCreateWrapper}>\r\n            <TodoCreate />\r\n          </div>\r\n        </div>\r\n        <div\r\n          className={classes.todosWrapper}\r\n          style={{\r\n            columnCount: isListView ? 1 : numberOfColumns,\r\n            width: width\r\n          }}\r\n        >\r\n          { filteredItems && filteredItems.map((noteItem) => {\r\n            return (\r\n              <div\r\n                key={noteItem._id}\r\n                className={classes.todoWrapper}\r\n                style={{ width: isMobile || isListView ? \"100%\" : null }}\r\n              >\r\n                <TodoItem\r\n                  noteItem={noteItem}\r\n                  isEditMode={noteInEditMode === noteItem._id}\r\n                />\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\drawer\\drawer.js",["211","212","213"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\feed\\task.js",["214","215","216"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Redux\\uiRedux\\actions.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\drawer\\drawerItem.js",["217"],"import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  listItemRoot: {\r\n    borderRadius: theme.spacing(0, 3, 3, 0)\r\n  },\r\n  listItemSelected: {\r\n    backgroundColor: `${theme.palette.secondary.light} !important`\r\n  }\r\n}));\r\n\r\nexport default function({ text, icon, isSelected, onClick }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <ListItem\r\n      button\r\n      selected={isSelected}\r\n      classes={{\r\n        selected: classes.listItemSelected,\r\n        root: classes.listItemRoot\r\n      }}\r\n      onClick={onClick}\r\n    >\r\n      <ListItemIcon>{icon}</ListItemIcon>\r\n      <ListItemText primary={text} />\r\n    </ListItem>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\feed\\addTask.js",["218"],"import React, { useState } from \"react\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport { Paper, InputBase, Collapse, Button } from \"@material-ui/core\";\r\nimport TodoActions from \"../task/actions\";\r\nimport TodoLabels from \"../task/labels\";\r\nimport TodoContent from \"../task/content\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addTask } from \"../../Redux/taskRedux/actions\";\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paperWrapper: {\r\n    transition: theme.transitions.create(\"all\", {\r\n      easing: theme.transitions.easing.easeIn,\r\n      duration: theme.transitions.duration.short\r\n    }),\r\n    borderColor: theme.custom.palette.itemBorderColor,\r\n    borderWidth: theme.spacing(0.1),\r\n    borderStyle: \"solid\"\r\n  },\r\n  wrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  inputTitleRoot: {\r\n    ...theme.custom.fontFamily.metropolis,\r\n    padding: theme.spacing(1.25, 2)\r\n  },\r\n  inputTitleInput: {\r\n    fontWeight: 500,\r\n    fontSize: \"1rem\",\r\n    padding: 0,\r\n    lineHeight: \"1rem\",\r\n    verticalAlign: \"middle\",\r\n    color: theme.palette.text.primary\r\n  },\r\n  inputNoteRoot: {\r\n    ...theme.custom.fontFamily.roboto,\r\n    padding: theme.spacing(1.5, 2)\r\n  },\r\n  inputNoteInput: {\r\n    fontWeight: 500,\r\n    fontSize: \"0.85rem\",\r\n    padding: 0,\r\n    color: theme.palette.text.primary\r\n  },\r\n  barWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    padding: theme.spacing(1, 2),\r\n    justifyContent: \"space-between\"\r\n  }\r\n}));\r\n\r\nexport default function () {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [isFocussed, setFocussed] = useState(false);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [notes, setNotes] = useState([]);\r\n  const [color, setColor] = useState(\"default\");\r\n  const [isCheckboxMode, setCheckboxMode] = useState(false);\r\n  const [labels, setLabels] = useState([]);\r\n  const dispatch = useDispatch()\r\n  const id  = useSelector(state => state.auth.id);\r\n\r\n  \r\n\r\n  const onCloseClick = () => {\r\n    const data={\r\n      user_id:id,\r\n      title,\r\n      tasks:notes,\r\n      labels:labels,\r\n      type:isCheckboxMode? \"list\":\"note\",\r\n      color:color,\r\n      status:\"active\"\r\n    }    \r\n    dispatch(addTask(data))\r\n    setTitle(\"\");\r\n    setNotes([]);\r\n    setColor(\"default\");\r\n    setCheckboxMode(false);\r\n    setLabels([]);\r\n    setFocussed(false);\r\n  }\r\n\r\n\r\n  return (\r\n    <Paper\r\n      elevation={2}\r\n      classes={{ root: classes.paperWrapper }}\r\n      style={{ backgroundColor: theme.custom.palette.noteBackground[color] }}\r\n    >\r\n      <Collapse\r\n        classes={{ wrapperInner: classes.wrapper }}\r\n        in={isFocussed}\r\n        collapsedHeight=\"2.7rem\"\r\n      >\r\n        <InputBase\r\n          placeholder={isFocussed ? \"Title\" : \"Take a note...\"}\r\n          classes={{\r\n            root: isFocussed ? classes.inputTitleRoot : classes.inputNoteRoot,\r\n            input: classes.inputTitleInput\r\n          }}\r\n          onFocus={() => setFocussed(true)}\r\n          inputProps={{ \"aria-label\": \"note title\" }}\r\n          value={title}\r\n          onChange={event => setTitle(event.target.value)}\r\n        />\r\n        {isFocussed ? (\r\n          <TodoContent\r\n            notes={notes}\r\n            setNotes={setNotes}\r\n            isEditMode={true}\r\n            isCheckboxMode={isCheckboxMode}\r\n          />\r\n        ) : null}\r\n        <TodoLabels labels={labels} />\r\n        <div className={classes.barWrapper}>\r\n          <TodoActions\r\n            id={\"\"}\r\n            color={color}\r\n            setColor={setColor}\r\n            labels={labels}\r\n            setLabels={setLabels}\r\n            setCheckboxMode={setCheckboxMode}\r\n            isCreateMode={true}\r\n            isCheckboxMode={isCheckboxMode}\r\n          />\r\n          <div>\r\n            <Button size=\"small\" onClick={onCloseClick}>\r\n              Save\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </Collapse>\r\n    </Paper>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\navbar\\search.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\navbar\\profile.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\content.js",["219"],"import React from \"react\";\r\nimport ContentList from \"./list\";\r\nimport ContentText from \"./text\";\r\n\r\nexport default function ({ notes, setNotes, isEditMode, isCheckboxMode }) {  \r\n  return (\r\n    <>\r\n      {isCheckboxMode ? (\r\n        <ContentList notes={notes} setNotes={setNotes} isEditMode={isEditMode} />\r\n      ) : (\r\n          <ContentText notes={notes.map(e => e.task).join(\"\\n\")} setNotes={setNotes} isEditMode={isEditMode} />\r\n        )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\heading.js",["220"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { InputBase, Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  inputTitleRoot: {\r\n    ...theme.custom.fontFamily.metropolis,\r\n    padding: theme.spacing(1.5, 2, 0, 2)\r\n  },\r\n  inputTitleInput: {\r\n    fontWeight: 500,\r\n    fontSize: \"1rem\",\r\n    padding: 0,\r\n    lineHeight: theme.spacing(0.18),\r\n    verticalAlign: \"middle\",\r\n    color: theme.palette.text.primary\r\n  },\r\n  textTitle: {\r\n    ...theme.custom.fontFamily.metropolis,\r\n    padding: theme.spacing(1.5, 2, 0, 2),\r\n    fontWeight: 500,\r\n    fontSize: \"1rem\",\r\n    color: theme.palette.text.primary,\r\n    lineHeight: theme.spacing(0.18),\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  }\r\n}));\r\n\r\nexport default function ({ title, setTitle, isEditMode }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      {isEditMode ? (\r\n        <InputBase\r\n          placeholder={\"Title\"}\r\n          classes={{\r\n            root: classes.inputTitleRoot,\r\n            input: classes.inputTitleInput\r\n          }}\r\n          inputProps={{ \"aria-label\": \"note title\" }}\r\n          value={title}\r\n          multiline={true}\r\n          onChange={(event) => setTitle(event.target.value)}\r\n        />\r\n      ) : (\r\n          <Typography className={classes.textTitle} variant=\"subtitle1\">\r\n            {title}\r\n          </Typography>\r\n        )}\r\n    </>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\actions.js",["221"],"import React, { useRef, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { IconButton, Tooltip } from \"@material-ui/core\";\r\nimport {PaletteOutlined as PaletteIcon,LabelOutlined as LabelIcon,DeleteOutlineOutlined as DeleteIcon,\r\n  ArchiveOutlined as ArchiveIcon,CheckBoxOutlined as CheckBoxIcon,WbIncandescentOutlined as IdeaIcon,\r\n  IndeterminateCheckBoxOutlined as HideCheckBoxIcon} from \"@material-ui/icons\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport ColorPopover from \"./color\";\r\nimport LabelPopover from \"./label\";\r\nimport { useDispatch} from \"react-redux\";\r\nimport { set_edit } from \"../../Redux/uiRedux/actions\";\r\nimport { editTask } from \"../../Redux/taskRedux/actions\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  optionsWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\"\r\n  },\r\n  optionWrapperFirst: {\r\n    padding: theme.spacing(0, 1, 0, 0)\r\n  },\r\n  optionWrapperLast: {\r\n    padding: theme.spacing(0, 0, 0, 1)\r\n  },\r\n  optionWrapper: {\r\n    padding: theme.spacing(0, 1)\r\n  },\r\n  barClose: {}\r\n}));\r\n\r\nexport default function ({ id,item, labels, setLabels, color, setColor, setCheckboxMode, isCreateMode, isCheckboxMode }) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const refActionColor = useRef();\r\n  const refActionLabel = useRef();\r\n  const dispatch = useDispatch()\r\n  const [isColorPopoverOpen, setColorPopoverOpen] = useState(false);\r\n  const [isLabelPopoverOpen, setLabelPopoverOpen] = useState(false);  \r\n\r\n  const archiveNote = () => {\r\n    const data={\r\n      user_id:item.user_id,\r\n      title:item.title,\r\n      tasks:item.tasks,\r\n      labels:item.labels,\r\n      type:item.type,\r\n      color:item.color,\r\n      status:\"archive\"\r\n    }\r\n    dispatch(editTask(id,data))\r\n    dispatch(set_edit(\"\"))\r\n  }\r\n  const setActive = () => {\r\n    const data={\r\n      user_id:item.user_id,\r\n      title:item.title,\r\n      tasks:item.tasks,\r\n      labels:item.labels,\r\n      type:item.type,\r\n      color:item.color,\r\n      status:\"active\"\r\n    }\r\n    dispatch(editTask(id,data))\r\n    dispatch(set_edit(\"\"))\r\n  }\r\n\r\n  const deleteNote = () => {\r\n    const data={\r\n      user_id:item.user_id,\r\n      title:item.title,\r\n      tasks:item.tasks,\r\n      labels:item.labels,\r\n      type:item.type,\r\n      color:item.color,\r\n      status:\"trash\"\r\n    }\r\n    dispatch(editTask(id,data))\r\n    dispatch(set_edit(\"\"))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className={classes.optionsWrapper}>\r\n        <div className={classes.optionWrapperFirst}>\r\n          <Tooltip title=\"Change Color\">\r\n            <IconButton\r\n              size=\"small\"\r\n              aria-label=\"change color\"\r\n              ref={refActionColor}\r\n              onClick={() => setColorPopoverOpen(true)}\r\n            >\r\n              <PaletteIcon\r\n                htmlColor={theme.custom.palette.iconHighlight}\r\n                fontSize=\"small\"\r\n              />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </div>\r\n        <div className={classes.optionWrapper}>\r\n          <Tooltip title=\"Show Checkboxes\">\r\n            <IconButton\r\n              size=\"small\"\r\n              aria-label=\"show checkboxes\"\r\n              onClick={() => setCheckboxMode(!isCheckboxMode)}\r\n            >\r\n              {isCheckboxMode ? (\r\n                <HideCheckBoxIcon\r\n                  htmlColor={theme.custom.palette.iconHighlight}\r\n                  fontSize=\"small\"\r\n                />\r\n              ) : (\r\n                  <CheckBoxIcon\r\n                    htmlColor={theme.custom.palette.iconHighlight}\r\n                    fontSize=\"small\"\r\n                  />\r\n                )}\r\n            </IconButton>\r\n          </Tooltip>\r\n        </div>\r\n        <div className={classes.optionWrapper}>\r\n          <Tooltip title=\"Change labels\">\r\n            <IconButton\r\n              size=\"small\"\r\n              aria-label=\"change labels\"\r\n              ref={refActionLabel}\r\n              onClick={() => setLabelPopoverOpen(true)}\r\n            >\r\n              <LabelIcon\r\n                htmlColor={theme.custom.palette.iconHighlight}\r\n                fontSize=\"small\"\r\n              />\r\n            </IconButton>\r\n          </Tooltip>\r\n        </div>\r\n        {isCreateMode ? null : (\r\n          <>\r\n            <div className={classes.optionWrapper}>\r\n             {item.status!==\"archive\" && <Tooltip title=\"Archive\">\r\n                <IconButton\r\n                  size=\"small\"\r\n                  aria-label=\"archive note\"\r\n                  onClick={archiveNote}\r\n                >\r\n                  <ArchiveIcon\r\n                    htmlColor={theme.custom.palette.iconHighlight}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </IconButton>\r\n              </Tooltip>}\r\n             {item.status===\"archive\" && <Tooltip title=\"Undo Archive\">\r\n                <IconButton\r\n                  size=\"small\"\r\n                  aria-label=\"archive note\"\r\n                  onClick={setActive}\r\n                >\r\n                  <IdeaIcon\r\n                    htmlColor={theme.custom.palette.iconHighlight}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </IconButton>\r\n              </Tooltip>}\r\n            </div>\r\n\r\n            <div className={classes.optionWrapperLast}>\r\n              {item.status!==\"trash\" &&<Tooltip title=\"Delete\">\r\n                <IconButton\r\n                  size=\"small\"\r\n                  aria-label=\"delete note\"\r\n                  onClick={deleteNote}\r\n                >\r\n                  <DeleteIcon\r\n                    htmlColor={theme.custom.palette.iconHighlight}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </IconButton>\r\n              </Tooltip>}\r\n              {item.status===\"trash\" &&<Tooltip title=\"Undo Delete\">\r\n                <IconButton\r\n                  size=\"small\"\r\n                  aria-label=\"delete note\"\r\n                  onClick={setActive}\r\n                >\r\n                  <IdeaIcon\r\n                    htmlColor={theme.custom.palette.iconHighlight}\r\n                    fontSize=\"small\"\r\n                  />\r\n                </IconButton>\r\n              </Tooltip>}\r\n            </div>\r\n          </>\r\n        )}\r\n      </div>\r\n      <ColorPopover\r\n        anchorEl={refActionColor.current}\r\n        isOpen={isColorPopoverOpen}\r\n        onClose={() => setColorPopoverOpen(false)}\r\n        currentColor={color}\r\n        onColorSelect={color => setColor(color)}\r\n      />\r\n      <LabelPopover\r\n        anchorEl={refActionLabel.current}\r\n        isOpen={isLabelPopoverOpen}\r\n        setLabels={setLabels}\r\n        labels={labels}\r\n        onClose={() => setLabelPopoverOpen(false)}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\labels.js",["222"],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\label.js",["223","224"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {Popover,List,ListItem,ListItemIcon,ListItemText,Checkbox,Typography,InputBase,Divider,Button,useTheme} from \"@material-ui/core\";\r\nimport {CheckBoxOutlineBlankOutlined as CheckboxBlankIcon,CheckBoxOutlined as CheckboxIcon,\r\n  AddOutlined as AddIcon,SearchOutlined as SearchIcon} from \"@material-ui/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { add_label } from \"../../Redux/taskRedux/actions\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  popover: {\r\n    width: theme.spacing(28),\r\n    borderRadius: theme.spacing(0.5),\r\n    background: theme.palette.background.default\r\n  },\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  header: {\r\n    padding: theme.spacing(1.5, 1.5, 0, 1.5),\r\n    marginBottom: theme.spacing(-1)\r\n  },\r\n  searchInput: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\"\r\n  },\r\n  inputText: {\r\n    ...theme.custom.fontFamily.roboto,\r\n    fontWeight: 400,\r\n    fontSize: \"0.8rem\",\r\n    flex: 1\r\n  },\r\n  listItemIconRoot: {\r\n    margin: \"0 !important\",\r\n    padding: \"0 !important\",\r\n    minWidth: \"0px\"\r\n  },\r\n  checkboxRoot: {\r\n    margin: `${theme.spacing(0.5)}px ${theme.spacing(1)}px ${theme.spacing(\r\n      0.5\r\n    )}px ${theme.spacing(1.5)}px !important`,\r\n    padding: \"0 !important\"\r\n  },\r\n  listItemText: {\r\n    ...theme.custom.fontFamily.roboto,\r\n    fontWeight: 400,\r\n    fontSize: \"0.8rem\"\r\n  },\r\n  footer: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    padding: theme.spacing(0.8, 1.5, 0.8, 1.5),\r\n    borderRadius: 0,\r\n    justifyContent: \"left\"\r\n  },\r\n  footerText: {\r\n    ...theme.custom.fontFamily.roboto,\r\n    fontWeight: 400,\r\n    fontSize: \"0.8rem\",\r\n    paddingLeft: theme.spacing(1),\r\n    textTransform: \"none\"\r\n  }\r\n}));\r\n\r\nexport default function LabelPopover({ anchorEl, labels, setLabels, isOpen, onClose }) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const popoverId = isOpen ? \"color-popover\" : undefined;\r\n  const [newLabelName, setNewLabelName] = useState(\"\");\r\n  const allLabelItems=useSelector(state => state.tasks.labelItems)\r\n  const dispatchLabel=\"\"\r\n  const dispatch=useDispatch()\r\n  const filteredLabelItems = allLabelItems.filter(labelItem =>\r\n    newLabelName === \"\" || labelItem.includes(newLabelName)\r\n  );\r\n  const createLabelExecute= ()=>{};\r\n  const updateLabelsForNote = (labelItem) => {\r\n    const updatedLabelIndex = labels.findIndex(selectedLabel => selectedLabel === labelItem);\r\n    if (updatedLabelIndex > -1) {\r\n      labels.splice(updatedLabelIndex, 1);\r\n    } else {\r\n      labels.push(labelItem);\r\n    }\r\n    setLabels(Object.assign([], labels));\r\n  };\r\n  const createLabel = () => {    \r\n      dispatch(add_label(newLabelName)) \r\n  }\r\n  return (\r\n    <div>\r\n      <Popover\r\n        id={popoverId}\r\n        open={isOpen}\r\n        anchorEl={anchorEl}\r\n        onClose={onClose}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"right\"\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"left\"\r\n        }}\r\n        classes={{\r\n          paper: classes.popover\r\n        }}\r\n      >\r\n        <div className={classes.container}>\r\n          <div className={classes.header}>\r\n            <Typography variant=\"subtitle2\">Label note</Typography>\r\n            <div className={classes.searchInput}>\r\n              <InputBase\r\n                classes={{ root: classes.inputText }}\r\n                placeholder=\"Enter label name\"\r\n                value={newLabelName}\r\n                onChange={event => setNewLabelName(event.target.value)}\r\n              />\r\n              <SearchIcon\r\n                fontSize=\"small\"\r\n                htmlColor={theme.palette.grey[500]}\r\n              />\r\n            </div>\r\n          </div>\r\n          <List dense={true} component=\"div\" style={{ width: \"100%\" }}>\r\n            {filteredLabelItems.map(labelItem => {\r\n              const labelAriaId = `checkbox-list-label-${labelItem.id}`;\r\n\r\n              return (\r\n                <ListItem\r\n                  alignItems=\"flex-start\"\r\n                  key={labelItem.id}\r\n                  dense={true}\r\n                  button={true}\r\n                  disableGutters={true}\r\n                  classes={{ root: classes.listItemIconRoot }}\r\n                  onClick={() => updateLabelsForNote(labelItem)}\r\n                >\r\n                  <ListItemIcon classes={{ root: classes.listItemIconRoot }}>\r\n                    <Checkbox\r\n                      tabIndex={-1}\r\n                      icon={<CheckboxBlankIcon fontSize=\"small\" />}\r\n                      checkedIcon={<CheckboxIcon fontSize=\"small\" />}\r\n                      color=\"default\"\r\n                      disableRipple\r\n                      checked={labels.some((label) => label === labelItem)}\r\n                      inputProps={{ \"aria-labelledby\": labelAriaId }}\r\n                      size=\"small\"\r\n                      classes={{ root: classes.checkboxRoot }}\r\n                    />\r\n                  </ListItemIcon>\r\n                  <ListItemText id={labelItem} disableTypography>\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      classes={{ root: classes.listItemText }}\r\n                    >\r\n                      {labelItem}\r\n                    </Typography>\r\n                  </ListItemText>\r\n                </ListItem>\r\n              );\r\n            })}\r\n          </List>\r\n          {newLabelName !== \"\" ? (\r\n            <>\r\n              <Divider />\r\n              <Button size=\"small\" classes={{ root: classes.footer }} onClick={createLabel}>\r\n                <AddIcon fontSize=\"small\" />\r\n                <Typography classes={{ root: classes.footerText }}>\r\n                  Create \"<b>{newLabelName}</b>\"\r\n                </Typography>\r\n              </Button>\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\color.js",[],"C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\list.js",["225"],"import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {InputBase,Checkbox,IconButton,useTheme} from \"@material-ui/core\";\r\nimport {AddOutlined as AddIcon,CheckBoxOutlineBlankOutlined as CheckboxBlankIcon,CheckBoxOutlined as CheckboxIcon,\r\n  CloseOutlined as CloseIcon} from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  itemContainerWithBorder: {\r\n    borderStyle: \"solid\",\r\n    borderWidth: `${theme.spacing(0.1)}px 0 ${theme.spacing(0.1)}px 0`,\r\n    borderColor: theme.palette.divider\r\n  },\r\n  itemContainerWithoutBorder: {\r\n    borderStyle: \"solid\",\r\n    borderWidth: `${theme.spacing(0.1)}px 0 ${theme.spacing(0.1)}px 0`,\r\n    borderColor: \"transparent\"\r\n  },\r\n  itemWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignContent: \"center\",\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(1),\r\n    minHeight: theme.spacing(4)\r\n  },\r\n  inputRoot: {\r\n    flex: 1\r\n  },\r\n  checkboxRoot: {\r\n    margin: `auto ${theme.spacing(1.5)}px`,\r\n    padding: \"0 !important\",\r\n    color: `${theme.custom.palette.notesCheckbox} !important`\r\n  },\r\n  textEmpty: {\r\n    ...theme.custom.fontFamily.metropolis,\r\n    fontWeight: 500,\r\n    fontSize: \"0.875rem\",\r\n    verticalAlign: \"middle\"\r\n  },\r\n  textIncomplete: {\r\n    fontWeight: 400,\r\n    fontSize: \"0.875rem\",\r\n    verticalAlign: \"middle\"\r\n  },\r\n  textComplete: {\r\n    textDecoration: \"line-through\",\r\n    textDecorationColor: theme.palette.text.secondary,\r\n    fontWeight: 400,\r\n    fontSize: \"0.875rem\",\r\n    verticalAlign: \"middle\"\r\n  },\r\n  closeButtonWrapper: {\r\n    margin: \"auto 0\"\r\n  }\r\n}));\r\n\r\nexport default function ({ notes, setNotes, isEditMode }) {\r\n  const onTextChange = (index, text) => {\r\n    const updatedNoteItems = Object.assign([], notes);\r\n    updatedNoteItems[index].task = text;\r\n    setNotes(updatedNoteItems);\r\n  };\r\n  const onMarkCompleted = (index, isCompleted) => {\r\n    const updatedNoteItems = Object.assign([], notes);\r\n    updatedNoteItems[index].status = !notes[index].status;\r\n    setNotes(updatedNoteItems);\r\n  };\r\n  const onDeletePressed = index => {\r\n    const updatedNoteItems = Object.assign([], notes);\r\n    updatedNoteItems.splice(index, 1);\r\n    setNotes(updatedNoteItems);\r\n  };\r\n  const onKeyPressed = (index, event) => {\r\n    if (event.keyCode === 13) { // Enter pressed, create a new row item\r\n      event.preventDefault();\r\n      var updatedNoteItems = Object.assign([], notes);\r\n      updatedNoteItems = updatedNoteItems.filter(note => note.text !== \"\")\r\n      updatedNoteItems.splice(index + 1, 0, { task: \"\", isCompleted: false });\r\n      setNotes(updatedNoteItems);\r\n    }\r\n  };\r\n\r\n  if (notes.length === 0) {\r\n    notes = [{ text: \"\", isCompleted: false }]\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {notes.map((task, index) => (\r\n        <ContentListItem\r\n          key={index}\r\n          index={index}\r\n          text={task.task}\r\n          isCompleted={task.status}\r\n          isEditMode={isEditMode}\r\n          onTextChange={onTextChange}\r\n          onMarkCompleted={onMarkCompleted}\r\n          onDeletePressed={onDeletePressed}\r\n          onKeyPressed={onKeyPressed}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nfunction ContentListItem({\r\n  index,\r\n  text,\r\n  isCompleted,\r\n  isEditMode,\r\n  onTextChange,\r\n  onMarkCompleted,\r\n  onDeletePressed,\r\n  onKeyPressed\r\n}) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [isFocussed, setFocussed] = useState(false);\r\n  const [isHovered, setHovered] = useState(false);\r\n  const isEmpty = text === \"\";\r\n  return (\r\n    <div\r\n      className={\r\n        isFocussed\r\n          ? classes.itemContainerWithBorder\r\n          : classes.itemContainerWithoutBorder\r\n      }\r\n      onMouseEnter={() => setHovered(true)}\r\n      onMouseLeave={() => setHovered(false)}\r\n    >\r\n      <div className={classes.itemWrapper}>\r\n        <Checkbox\r\n          icon={\r\n            (isEmpty && isEditMode) ? (\r\n              <AddIcon fontSize=\"small\" />\r\n            ) : (\r\n                <CheckboxBlankIcon fontSize=\"small\" />\r\n              )\r\n          }\r\n          checkedIcon={<CheckboxIcon fontSize=\"small\" />}\r\n          color=\"default\"\r\n          checked={isCompleted}\r\n          disabled={!isEditMode || isEmpty}\r\n          classes={{ root: classes.checkboxRoot }}\r\n          onChange={event => onMarkCompleted(index, event.target.checked)}\r\n        />\r\n        <InputBase\r\n          classes={{\r\n            root: classes.inputRoot,\r\n            input: isEmpty\r\n              ? classes.textEmpty\r\n              : isCompleted\r\n                ? classes.textComplete\r\n                : classes.textIncomplete\r\n          }}\r\n          value={text}\r\n          placeholder={isEditMode ? \"List Item\" : \"\"}\r\n          onChange={event => onTextChange(index, event.target.value)}\r\n          onKeyDown={event => onKeyPressed(index, event)}\r\n          onFocus={() => setFocussed(true)}\r\n          onBlur={() => setFocussed(false)}\r\n          autoFocus={isEmpty}\r\n          readOnly={!isEditMode}\r\n          multiline={true}\r\n        />\r\n        {isEditMode ? (\r\n          isHovered ? (\r\n            <div className={classes.closeButtonWrapper}>\r\n              <IconButton size=\"small\" onClick={() => onDeletePressed(index)}>\r\n                <CloseIcon htmlColor={theme.custom.palette.iconColor} fontSize=\"small\" />\r\n              </IconButton>\r\n            </div>\r\n          ) : (\r\n              <div style={{ width: \"26px\" }} />\r\n            )\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Masai\\Revision\\interview\\smallcase\\deploy\\GoogleKeep-FrontEnd\\src\\Components\\task\\text.js",["226"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { InputBase, Typography } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  optionsWrapper: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    justifyContent: \"space-between\"\r\n  },\r\n  optionWrapperFirst: {\r\n    padding: theme.spacing(0, 1, 0, 0)\r\n  },\r\n  optionWrapperLast: {\r\n    padding: theme.spacing(0, 0, 0, 1)\r\n  },\r\n  optionWrapper: {\r\n    padding: theme.spacing(0, 1)\r\n  },\r\n  barClose: {},\r\n  inputNoteRoot: {\r\n    ...theme.custom.fontFamily.roboto,\r\n    padding: theme.spacing(0.5, 2, 1.5, 2)\r\n  },\r\n  inputNoteInput: {\r\n    fontWeight: 400,\r\n    fontSize: \"0.88rem\",\r\n    padding: 0,\r\n    color: theme.palette.text.primary\r\n  },\r\n  textContainer: {\r\n    padding: theme.spacing(0.5, 2, 1.5, 2),\r\n  },\r\n  textNote: {\r\n    ...theme.custom.fontFamily.roboto,\r\n    fontWeight: 400,\r\n    fontSize: \"0.88rem\",\r\n    color: theme.palette.text.primary\r\n  }\r\n}));\r\n\r\nexport default function ({ notes, setNotes, isEditMode }) {\r\n  const classes = useStyles();\r\n  const reducedText = notes\r\n\r\n  const onTextChanged = event => {\r\n    const text = event.target.value;\r\n    const textParts = text.split(\"\\n\").map(text => ({ task: text, status: false }));\r\n    setNotes(textParts)\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isEditMode ? (\r\n        <InputBase\r\n          placeholder=\"Take a note...\"\r\n          classes={{\r\n            root: classes.inputNoteRoot,\r\n            input: classes.inputNoteInput\r\n          }}\r\n          inputProps={{ \"aria-label\": \"take a note\" }}\r\n          value={reducedText}\r\n          onChange={onTextChanged}\r\n          multiline={true}\r\n        />\r\n      ) : (\r\n          <div className={classes.textContainer}>\r\n            \r\n              <Typography className={classes.textNote} variant=\"body1\">\r\n                {notes}\r\n              </Typography>\r\n           \r\n          </div>\r\n        )}\r\n    </>\r\n  );\r\n}\r\n",{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","severity":1,"message":"232","line":4,"column":10,"nodeType":"233","messageId":"234","endLine":4,"endColumn":19},{"ruleId":"235","severity":1,"message":"236","line":31,"column":11,"nodeType":"233","messageId":"237","endLine":31,"endColumn":15},{"ruleId":"231","severity":1,"message":"238","line":4,"column":15,"nodeType":"233","messageId":"234","endLine":4,"endColumn":31},{"ruleId":"231","severity":1,"message":"239","line":4,"column":33,"nodeType":"233","messageId":"234","endLine":4,"endColumn":49},{"ruleId":"231","severity":1,"message":"240","line":4,"column":51,"nodeType":"233","messageId":"234","endLine":4,"endColumn":67},{"ruleId":"241","severity":1,"message":"242","line":11,"column":6,"nodeType":"243","endLine":11,"endColumn":8,"suggestions":"244"},{"ruleId":"241","severity":1,"message":"245","line":22,"column":8,"nodeType":"243","endLine":22,"endColumn":10,"suggestions":"246"},{"ruleId":"241","severity":1,"message":"247","line":24,"column":6,"nodeType":"243","endLine":24,"endColumn":31,"suggestions":"248"},{"ruleId":"231","severity":1,"message":"249","line":7,"column":10,"nodeType":"233","messageId":"234","endLine":7,"endColumn":18},{"ruleId":"231","severity":1,"message":"250","line":89,"column":11,"nodeType":"233","messageId":"234","endLine":89,"endColumn":16},{"ruleId":"241","severity":1,"message":"251","line":98,"column":10,"nodeType":"243","endLine":98,"endColumn":18,"suggestions":"252"},{"ruleId":"241","severity":1,"message":"251","line":96,"column":10,"nodeType":"243","endLine":96,"endColumn":18,"suggestions":"253"},{"ruleId":"254","severity":1,"message":"255","line":126,"column":323,"nodeType":"256","messageId":"257","endLine":126,"endColumn":325},{"ruleId":"254","severity":1,"message":"255","line":126,"column":356,"nodeType":"256","messageId":"257","endLine":126,"endColumn":358},{"ruleId":"231","severity":1,"message":"258","line":54,"column":7,"nodeType":"233","messageId":"234","endLine":54,"endColumn":22},{"ruleId":"231","severity":1,"message":"259","line":62,"column":5,"nodeType":"233","messageId":"234","endLine":62,"endColumn":6},{"ruleId":"231","severity":1,"message":"260","line":7,"column":7,"nodeType":"233","messageId":"234","endLine":7,"endColumn":22},{"ruleId":"231","severity":1,"message":"261","line":1,"column":34,"nodeType":"233","messageId":"234","endLine":1,"endColumn":47},{"ruleId":"262","severity":1,"message":"263","line":51,"column":1,"nodeType":"264","endLine":141,"endColumn":2},{"ruleId":"265","severity":1,"message":"266","line":104,"column":20,"nodeType":"267","messageId":"268","endLine":104,"endColumn":22},{"ruleId":"262","severity":1,"message":"263","line":60,"column":1,"nodeType":"264","endLine":172,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":52,"column":1,"nodeType":"264","endLine":141,"endColumn":2},{"ruleId":"231","severity":1,"message":"269","line":85,"column":9,"nodeType":"233","messageId":"234","endLine":85,"endColumn":16},{"ruleId":"231","severity":1,"message":"270","line":86,"column":9,"nodeType":"233","messageId":"234","endLine":86,"endColumn":17},{"ruleId":"231","severity":1,"message":"271","line":87,"column":11,"nodeType":"233","messageId":"234","endLine":87,"endColumn":13},{"ruleId":"231","severity":1,"message":"272","line":5,"column":22,"nodeType":"233","messageId":"234","endLine":5,"endColumn":31},{"ruleId":"231","severity":1,"message":"273","line":5,"column":81,"nodeType":"233","messageId":"234","endLine":5,"endColumn":89},{"ruleId":"265","severity":1,"message":"266","line":67,"column":37,"nodeType":"267","messageId":"268","endLine":67,"endColumn":39},{"ruleId":"231","severity":1,"message":"274","line":3,"column":52,"nodeType":"233","messageId":"234","endLine":3,"endColumn":58},{"ruleId":"262","severity":1,"message":"263","line":36,"column":1,"nodeType":"264","endLine":121,"endColumn":2},{"ruleId":"265","severity":1,"message":"266","line":45,"column":67,"nodeType":"267","messageId":"268","endLine":45,"endColumn":69},{"ruleId":"262","severity":1,"message":"263","line":16,"column":1,"nodeType":"264","endLine":33,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":55,"column":1,"nodeType":"264","endLine":140,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":5,"column":1,"nodeType":"264","endLine":15,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":30,"column":1,"nodeType":"264","endLine":54,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":32,"column":1,"nodeType":"264","endLine":210,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":22,"column":1,"nodeType":"264","endLine":33,"endColumn":2},{"ruleId":"231","severity":1,"message":"275","line":72,"column":9,"nodeType":"233","messageId":"234","endLine":72,"endColumn":22},{"ruleId":"231","severity":1,"message":"276","line":77,"column":9,"nodeType":"233","messageId":"234","endLine":77,"endColumn":27},{"ruleId":"262","severity":1,"message":"263","line":57,"column":1,"nodeType":"264","endLine":104,"endColumn":2},{"ruleId":"262","severity":1,"message":"263","line":42,"column":1,"nodeType":"264","endLine":77,"endColumn":2},"no-native-reassign",["277"],"no-negated-in-lhs",["278"],"no-unused-vars","'ADD_LABEL' is defined but never used.","Identifier","unusedVar","no-redeclare","'stat' is already defined.","redeclared","'ADD_TASK_REQUEST' is defined but never used.","'ADD_TASK_SUCCESS' is defined but never used.","'ADD_TASK_FAILURE' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["279"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["280"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["281"],"'Redirect' is defined but never used.","'error' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["282"],["283"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","'registerSuccess' is assigned a value but never used.","'i' is assigned a value but never used.","'addTask_Request' is assigned a value but never used.","'SEARCH_SUCESS' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'loading' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'id' is assigned a value but never used.","'MenuIcon2' is defined but never used.","'Fastfood' is defined but never used.","'Button' is defined but never used.","'dispatchLabel' is assigned a value but never used.","'createLabelExecute' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},{"desc":"288","fix":"289"},{"desc":"290","fix":"291"},{"desc":"290","fix":"292"},"Update the dependencies array to be: [dispatch]",{"range":"293","text":"294"},"Update the dependencies array to be: [dispatch, id]",{"range":"295","text":"296"},"Update the dependencies array to be: [dispatch, history.location.search, id]",{"range":"297","text":"298"},"Update the dependencies array to be: [history, isAuth]",{"range":"299","text":"300"},{"range":"301","text":"300"},[380,382],"[dispatch]",[864,866],"[dispatch, id]",[1020,1045],"[dispatch, history.location.search, id]",[2969,2977],"[history, isAuth]",[2854,2862]]